fprintf('\nWelcome to the Travleing Wave Project''s Analysis Package!\n');
%To Do
%  Add raw lfp ends to the sessions structure
% go through and fix poster making code
% add handeling for the distances
% 

clear all;
sInd = 2; % This selects the session you want to analyze TD: add user input
force = 1; % forces a data recalculation 

sessionsList; % init sessions from the sessionsList file


Rat =  sessions{sInd,1};
Session =  sessions{sInd,2};
Recording =  sessions{sInd,3};
chTxt = sessions{sInd,4};  
chOrd = sessions{sInd,5}; 
ref = sessions{sInd,6};
badEnds = sessions{sInd,7}; % !! could update this to good ends?

%% Path, fetching, preprocessing
fprintf(['Grabbing data for ', Rat, '. Recording # ', Recording, '\n']);
chS = mat2str(chOrd); fprintf(['Channels: ',chS(2:end-1),'\n']);
rlb = fullfile(dropboxPath, 'ratsEphys');
dataPath = fullfile(rlb,Rat,Session,Recording); cd(dataPath);
%dataPath = 'C:\Users\DarthMaul\Downloads\2017-12-19_20-04-50\2017-12-19_20-04-50'; fprintf('USING TEMP ROBLE PATH - FIX ME!\n');

%Check if the data already exists
structName = [Session '_' Rat '_root.mat'];
%Check if the data already exists
if ~force && exist(fullfile(dataPath, structName), 'file')
  fprintf('I found an existing root object, loading it in...\n');
  foundData = load(structName);
  
  % Check if the saved data is what we think it is
  fprintf('Checking session names...');
  if ~strcmp(foundData.Recording, sessions{sInd,3})
    warning('Imported data fields do not match requested session!\n')
    force = 1;
    % TD add way to move into the forced data recalculation if fields
    % dont match.
    keyboard;
  else
    fprintf('Checks out!\n');
    root = foundData.root; %set
  end
end

if force
  fprintf('\nProcessing data.\n')
  fnames = dir(fullfile(dataPath,'100_CH*.continuous'));
  fprintf('\nFetching the lfp.\n')
  fprintf('This may take some time...\n')
  [D, fs] = kLoadIntanLFP(chOrd,dataPath,fnames);
  
  fprintf('\nPrepping the data.\n')
  fprintf('(Cutting out bad epochs and grabbing theta cycles)\n')
  root = twPrepData(D,fs,ref);
  
  save(structName,'root','Recording','-v7.3');
  fprintf('Saving precomputed data (root) so next time is a breeze!\n');
end


% root.user_def.name = Rat;
% root.user_def.name = Rat;
% root.user_def.session = Session;
% root.user_def.recording = Recording;
% root.user_def.chOrdTxt = chTxt;
% root.user_def.ref = ref;

%% Plotting
figData = struct;
figData.ratInfo.name = Rat;
figData.ratInfo.session = Session;
figData.ratInfo.recording = Recording;
figData.ratInfo.chOrdTxt = chTxt;
figData.ratInfo.ref = ref;

plt = 0;

figData.saveFig = 1;
figData.figDir = 'twImgDir';
figData.savePath = fullfile('D:','Dropbox (NewmanLab)','docs (1)','docs_Keiland','Projects','travelingWave', figData.figDir);
figData.fig_type = 'png'; % options = {'png','ps','pdf'}


%Makes the average wave plot  b
% td add argument for window width (two cycles) 
epochSize = 0.140; %one hump 0.100;
[CTA] = plotCycleTriggeredAvg(root, epochSize, figData, plt);
figData.CTA = CTA;

%Makes the cross corrolation plot %Need to update this
%twCrossCorr(root)
pd = twPlotPeakDiff(root, figData, plt);
figData.pd = pd;

% Raw LFP: Grabs the raw data from the specified indicies
% td Set these to the specified ends (romo 2Hps: 650 - 815)
ind1 = 720;
ind2 = 1251; %866;
[rawWaves] = twGrabRawData(root.user_def.lfp_origData, ind1, ind2, plt);
figData.rawWaves = rawWaves;

% function to see variability in slope of data
% 0 = peak ; pi = trough
twWaveVariability(root, figData, pi,  0, 0)
%% SubPlotting
%pause;
%twCombineFigs(figData, plt);




